import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.sql.Statement;
import java.util.ResourceBundle;
import javafx.fxml.Initializable;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

public class Supplier implements Initializable {

    @FXML
    private Button ADD;

    @FXML
    private Button RESET;

    @FXML
    private TextField supplierID;

    @FXML
    private TextArea supplierInfo;

    @FXML
    private TextField supplierName;

    @FXML
    private ChoiceBox<String> supplierProduct;
    private String[] products={"Catering Services","Decor and Event Styling","Audio-Visual Equipment","Entertainment"};

    @FXML
    private Label supplier_event_dash;

    @FXML
    private Label supplier_notification_dash;

    @FXML
    private Label supplier_venue_dash;

    @FXML
    void supplierAddbtn(ActionEvent event)throws SQLException {
       
            // Retrieve data from the form
            String name = supplierName.getText();
            String info = supplierInfo.getText();
            String product = supplierProduct.getValue();
            
    
            // Validate input fields
            if ( name.isEmpty() || info.isEmpty() || product.isEmpty()) {
                // Display an alert or handle validation as needed
                showAlert("Please Enter The Details", "All fields are required.");
            } else {
                // Proceed with adding the venue to the database
                String url = "jdbc:mysql://localhost:3306/FORM";
                String dbUsername = "root";
                String dbPassword = "12@#HardhiK";
            
                try (Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword)) {
                    // Define the SQL statement for insertion without specifying EventID
                String insertQuery = "INSERT INTO SUPPLIER (SupplierName, ContactInfo, Products) VALUES (?, ?, ?)";
    
                try {
                    // Prepare the SQL statement
                    PreparedStatement preparedStatement = connection.prepareStatement(insertQuery, Statement.RETURN_GENERATED_KEYS);
                    preparedStatement.setString(1, name);
                    preparedStatement.setString(2, info);
                    preparedStatement.setString(3, product);
                  
    
                    // Execute the INSERT statement
                    int rowsAffected = preparedStatement.executeUpdate();
    
                    if (rowsAffected > 0) {
                        // Insertion successful, retrieve the auto-generated ID
                        ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            int autoGeneratedID = generatedKeys.getInt(1);
                            supplierID.setText(String.valueOf(autoGeneratedID));
                            // Optionally, you can do something with the generated ID
                        }
    
                        System.out.println("Supplier added to the database.");
                        // Optionally, you can clear the form fields here.
                        
                    } else {
                        System.err.println("Failed to add the supplier details.");
                    }
                    
                } catch (SQLException e) {
                    e.printStackTrace();
                    System.err.println("Error adding the supplier details: " + e.getMessage());
                }}}
            }
              private void showAlert(String title, String content) {
                Alert alert = new Alert(AlertType.WARNING);
                alert.setTitle(title);
                alert.setHeaderText(null);
                alert.setContentText(content);
                alert.showAndWait();
            }
        
    
    @FXML
    void supplierResetbtn(ActionEvent event) {

    }

    @FXML
    void supplier_event_click(MouseEvent event) {
  navigateToEventPage();
    }

    @FXML
    void supplier_notify_click(MouseEvent event) {
navigateToNotificationPage();
    }

    @FXML
    void supplier_venue_click(MouseEvent event) {
navigateToVenuePage();
    }
 void navigateToEventPage() {
        try {
            // Load the Venue FXML file
            FXMLLoader loader = new FXMLLoader(getClass().getResource("Events.fxml"));
            Parent root = loader.load();

            // Create a new stage for the Venue page
            Stage stage = new Stage();
            stage.setScene(new Scene(root));

            // Show the Venue page
            stage.show();

            // Close the current Events page
            Stage currentStage = (Stage) supplier_event_dash.getScene().getWindow();
            currentStage.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


 void navigateToVenuePage() {
        try {
            // Load the Venue FXML file
            FXMLLoader loader = new FXMLLoader(getClass().getResource("Events.fxml"));
            Parent root = loader.load();

            // Create a new stage for the Venue page
            Stage stage = new Stage();
            stage.setScene(new Scene(root));

            // Show the Venue page
            stage.show();

            // Close the current Events page
            Stage currentStage = (Stage) supplier_event_dash.getScene().getWindow();
            currentStage.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    void navigateToNotificationPage() {
        try {
            // Load the Venue FXML file
            FXMLLoader loader = new FXMLLoader(getClass().getResource("Notification.fxml"));
            Parent root = loader.load();

            // Create a new stage for the Venue page
            Stage stage = new Stage();
            stage.setScene(new Scene(root));

            // Show the Venue page
            stage.show();

            // Close the current Events page
            Stage currentStage = (Stage)supplier_notification_dash.getScene().getWindow();
            currentStage.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void initialize(URL arg0,ResourceBundle arg1){
        supplierProduct.getItems().addAll(products);
    }
}
